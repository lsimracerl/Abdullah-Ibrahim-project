# -*- coding: utf-8 -*-
"""#Visitor Management.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdUUTCZ5xEPRUbTAXDRa0lLOzO2Sk2PB
"""

#NOTE: i used pycharm to do the code but this is the eassiest and most reliablie way for me to share the file :)


#Visitor Management
import random

class Artwork:
    def __init__(self, title, artist, date_of_creation, historical_significance, location):
        self.title = title
        self.artist = artist
        self.date_of_creation = date_of_creation
        self.historical_significance = historical_significance
        self.location = location

class Exhibition:
    def __init__(self, title, duration, location, artworks):
        self.title = title
        self.duration = duration
        self.location = location
        self.artworks = artworks

class Visitor:
    def __init__(self, name, age, emirates_id=None, tourist=False):
        self.name = name
        self.age = age
        self.emirates_id = emirates_id
        self.tourist = tourist

class Ticket:
    def __init__(self, visitor, event_type, price, online_purchase):
        self.visitor = visitor
        self.event_type = event_type
        self.price_before_discount = price  # Default ticket price
        self.discount = 0
        self.price_after_discount = price
        self.price_with_tax = price
        self.online_purchase = online_purchase

    def apply_discount(self, discount):
        self.discount = discount
        self.price_after_discount = self.price_before_discount * (1 - discount / 100)

    def apply_tax(self, tax_rate):
        self.price_with_tax = self.price_after_discount * (1 + tax_rate / 100)

class TourTicket(Ticket):
    def __init__(self, visitor, event_type, price, date, guide, online_purchase):
        super().__init__(visitor, event_type, price, online_purchase)
        self.date = date
        self.guide = guide

class SpecialEventTicket(Ticket):
    def __init__(self, visitor, event_type, price, location, duration, online_purchase):
        super().__init__(visitor, event_type, price, online_purchase)
        self.location = location
        self.duration = duration

class Pricing:
    @staticmethod
    def calculate_ticket_price(visitor, event_type, online_purchase=True):
        if event_type == "Special Event":
            if online_purchase:
                return 90  # Online special event ticket price
            else:
                return 100  # In-person special event ticket price
        else:
            if visitor.age <= 18 or visitor.age >= 60:
                if visitor.emirates_id:  # Local visitor
                    return 0  # Free ticket for locals under 18 and over 60
                else:  # Non-local visitor
                    return 63 * 0.5  # 50% discount for non-local visitors under 18 and over 60
            elif visitor.age >= 19 and visitor.age <= 59:
                return 63  # Default price for adults
            else:  # Special Event
                return 100  # Individual ticket price for special events

    @staticmethod
    def apply_vat(price, vat_rate):
        return price * (1 + vat_rate / 100)

def generate_random_visitor(local=True):
    # Generate random visitor information
    names = ["Abdullah", "Omar", "Ahmed", "Fatima", "Aisha", "Youssef", "Layla", "Mariam"]
    last_names = ["Al Fahim", "Al Mansoori", "Al Mazrouei", "Al Hammadi", "Al Nuaimi", "Al Suwaidi", "Al Kaabi", "Al Sharafi"]
    name = random.choice(names) + " " + random.choice(last_names)
    age = random.randint(1, 75)
    emirates_id = None
    tourist = not local
    if local:
        emirates_id = "784-" + ''.join([str(random.randint(0, 9)) for _ in range(7)]) + "-0"
    return Visitor(name, age, emirates_id, tourist)

def display_receipt(receipt_num, tickets):
    print(f"Receipt {receipt_num}:")
    for idx, ticket in enumerate(tickets, start=1):
        print(f"Ticket {idx}:")
        print(f"Visitor: {ticket.visitor.name}, Age: {ticket.visitor.age}, Local: {'Yes' if ticket.visitor.emirates_id else 'No'}")
        if ticket.visitor.emirates_id:
            print(f"Emirates ID: {ticket.visitor.emirates_id}")
        print(f"Event Type: {ticket.event_type}")
        print(f"Ticket Price (Before Discount): {ticket.price_before_discount} AED, Discount: {ticket.discount}%, Ticket Price (After Discount): {ticket.price_after_discount} AED")
        print(f"Price (with Tax): {ticket.price_with_tax} AED, Online Purchase: {ticket.online_purchase}")

# Test case for regular ticket purchase
tickets1 = [Ticket(generate_random_visitor(), "Exhibition", Pricing.calculate_ticket_price(generate_random_visitor(), "Exhibition"), online_purchase=True) for _ in range(1)]
tickets2 = [Ticket(generate_random_visitor(), "Exhibition", Pricing.calculate_ticket_price(generate_random_visitor(), "Exhibition"), online_purchase=False) for _ in range(2)]
tickets3 = [Ticket(generate_random_visitor(), "Exhibition", Pricing.calculate_ticket_price(generate_random_visitor(), "Exhibition"), online_purchase=True) for _ in range(3)]
tickets4 = [SpecialEventTicket(generate_random_visitor(), "Special Event", Pricing.calculate_ticket_price(generate_random_visitor(), "Special Event", online_purchase=False), "Main Hall", "2 hours", online_purchase=False) for _ in range(4)]
tickets5 = [SpecialEventTicket(generate_random_visitor(local=False), "Special Event", 90, "Main Hall", "2 hours", online_purchase=True) for _ in range(5)]

display_receipt(1, tickets1)
display_receipt(2, tickets2)
display_receipt(3, tickets3)
display_receipt(4, tickets4)
display_receipt(5, tickets5)

